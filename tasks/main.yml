---
# tasks file for perfsonar-testpoint

#####
# Load OS dependant variables
#####
# This needs to be done for all tags, so use the 'always' special tag
- name: Load variables based on OS type
  include_vars: "{{ item }}"
  tags: [ 'always' ]
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

#####
# Installation part: ps::install tag
#####
# Setup the required repositories
- name: Add EPEL repository (RedHat based systems)
  yum:
    name: epel-release
    state: latest
  tags: [ 'ps::install' ]
  when: ansible_os_family == "RedHat"

- name: Add perfSONAR repository (RedHat based systems)
  yum:
    name: http://software.internet2.edu/rpms/el7/x86_64/main/RPMS/perfSONAR-repo-0.8-1.noarch.rpm
    state: present
  tags: [ 'ps::install' ]
  when: ansible_os_family == "RedHat"

- name: Use perfSONAR staging or nightly repository (RedHat based systems)
  yum:
    name: perfSONAR-repo-{{ perfsonar_release }}
    state: present
  tags: [ 'ps::install' ]
  when:
    - ansible_os_family == "RedHat"
    - perfsonar_release == "staging" or perfsonar_release == "nightly"

- name: Make sure the universe repo is enabled (Ubuntu systems)
  # It is better to use add-apt-repository rather than the apt_repository module from Ansible.
  # This command will NOT duplicate an already existing universe repo setup using a mirror.
  shell: LANGUAGE=C add-apt-repository universe
  when: ansible_distribution == "Ubuntu"
  register: universe_output
  changed_when: universe_output.stdout != "'universe' distribution component is already enabled for all sources."

- name: Import perfSONAR repository signing key (Debian based systems)
  apt_key:
    url: http://downloads.perfsonar.net/debian/perfsonar-{{ perfsonar_release }}.gpg.key
    state: present
  tags: [ 'ps::install' ]
  when: ansible_os_family == "Debian"

- name: Add perfSONAR repository (Debian based systems)
  apt_repository:
    repo: deb http://downloads.perfsonar.net/debian/ perfsonar-{{ perfsonar_release }} main
    state: present
  tags: [ 'ps::install' ]
  when: ansible_os_family == "Debian"

# Make sure we have the latest upgrades installed
- name: Install system updates (RedHat based systems)
  yum:
    name: '*'
    state: latest
    update_cache: yes
  ignore_errors: True
  tags: [ 'ps::install' ]
  when: ansible_os_family == "RedHat"

- name: Install system updates (Debian based systems)
  apt:
    upgrade: dist
    update_cache: yes
  ignore_errors: True
  tags: [ 'ps::install' ]
  when: ansible_os_family == "Debian"

# Install the perfsonar packages
# The bundle is in a variable so that it can be overriden by roles higher up
- name: Install perfSONAR bundle "{{ perfsonar_bundle }}"
  package:
    name: "{{ perfsonar_bundle }}"
    state: present
  tags: [ 'ps::install' ]

# Install the optional perfsonar packages
- name: Install perfSONAR optional packages
  package:
    name: "{{ item }}"
    state: present
  tags: [ 'ps::install' ]
  with_items: "{{ perfsonar_optional_packages }}"

#####
# Configuration part: ps::config tag
#####
# Remove any conflictuous /etc/hosts configuration
- name: Make sure FQDN is not pointing to any localhost entry in /etc/hosts
  lineinfile:
    path: /etc/hosts
    state: 'absent'
    regexp: '127\.0\..*[\s]+{{ ansible_fqdn }}[\s]+.*'
  tags: [ 'ps::config' ]

- name: Disable ssh root access
  lineinfile:
    state: present
    path: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin "
    line: "PermitRootLogin no"
  tags: [ 'ps::config' ]
  when: perfsonar_disable_root_ssh
  notify:
    - restart ssh

# TODO: configure LS registration

# Configure the measurements
- name: Add psconfig remotes
  command: psconfig remote add "{{ perfsonar_psconfig_remote_options }}" "{{ item }}"
  with_items: "{{ perfsonar_psconfig_remote_remotes }}"
  tags: [ 'ps::config' ]


#####
# Verifying part: ps::running tag
#####
# Make sure services are running, but first flush handlers to ensure services are restarted
- meta: flush_handlers
- name: Check that all perfSONAR services are running
  service:
    name: "{{ item }}"
    state: started
  tags: [ 'ps::running' ]
  with_flattened:
      - "{{ perfsonar_services }}"
      - "{{ perfsonar_os_specific_services }}"

# Run a few useful perfSONAR commands
- name: Run pscheduler troubleshoot locally
  command: pscheduler troubleshoot
  tags: [ 'ps::running' ]
  changed_when: False

