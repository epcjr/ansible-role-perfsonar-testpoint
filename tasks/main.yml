---
# tasks file for perfsonar-testpoint

#####
# Load OS dependant variables
#####
# This needs to be done for all tags, so use the 'always' special tag
- name: Load variables based on OS type
  include_vars: "{{ item }}"
  tags: [ 'always' ]
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

#####
# Installation part: ps::install tag
#####

# OS specific install directives
- name: OS specific directives
  tags: [ 'ps::install' ]
  with_first_found:
    - "install-{{ ansible_os_family }}.yml"

# Install the perfsonar packages
# The bundle is in a variable so that it can be overriden by roles higher up
- name: Install perfSONAR bundle "{{ perfsonar_bundle }}"
  package:
    name: "{{ perfsonar_bundle }}"
    state: present
  tags: [ 'ps::install' ]

# Install the optional perfsonar packages
- name: Install perfSONAR optional packages
  package:
    name: "{{ item }}"
    state: present
  tags: [ 'ps::install' ]
  with_items: "{{ perfsonar_optional_packages }}"

#####
# Configuration part: ps::config tag
#####
# Remove any conflictuous /etc/hosts configuration
- name: Make sure FQDN is not pointing to any localhost entry in /etc/hosts
  lineinfile:
    path: /etc/hosts
    state: 'absent'
    regexp: '127\.0\..*[\s]+{{ ansible_fqdn }}[\s]+.*'
  tags: [ 'ps::config' ]

- name: Disable ssh root access
  lineinfile:
    state: present
    path: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin "
    line: "PermitRootLogin no"
  tags: [ 'ps::config' ]
  when: perfsonar_disable_root_ssh
  notify:
    - restart ssh

# TODO: configure LS registration

# Configure the measurements
- name: Add psconfig remotes
  command: psconfig remote add "{{ perfsonar_psconfig_remote_options }}" "{{ item }}"
  with_items: "{{ perfsonar_psconfig_remote_remotes }}"
  tags: [ 'ps::config' ]

#####
# Verifying part: ps::running tag
#####
# Make sure services are running, but first flush handlers to ensure services are restarted
- meta: flush_handlers
- name: Check that all perfSONAR services are running
  service:
    name: "{{ item }}"
    state: started
  tags: [ 'ps::running' ]
  with_flattened:
      - "{{ perfsonar_services }}"
      - "{{ perfsonar_os_specific_services }}"

# Run a few useful perfSONAR commands
- name: Run pscheduler troubleshoot locally
  command: pscheduler troubleshoot "{{ item }}"
  with_items: "{{ perfsonar_troubleshoot }}"
  tags: [ 'ps::running' ]
  changed_when: False
  when: perfsonar_troubleshoot is defined and perfsonar_troubleshoot != none

